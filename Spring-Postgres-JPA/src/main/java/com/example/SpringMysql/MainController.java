package com.example.SpringMysql;

import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping("/demo") // This means URL's start with /demo (after Application path) ex : use
							// http://localhost:8080/demo/all to find all
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private BookRepository userRepository;

	@PostMapping("/add") // Map ONLY POST Requests
	public @ResponseBody Book addNewUser(@RequestParam String name) {
		// @ResponseBody means the returned String(if you use @RestContraller you don't
		// need this) is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Book n = new Book();
		n.setName(name);
		userRepository.save(n);
		return n;
	}

	@GetMapping("/all")
	public @ResponseBody Iterable<Book> getAllUsers() {
		// This returns a JSON or XML with the users
		for (Book bb : userRepository.findAll()) {
			String s = bb.getName();
			if ("fuck".equals(s)) // this the way to do a "If" statement with Strings if ( "fuck".equals(s))
			{
				bb.setName("");
				userRepository.save(bb);
			}
		}

		return userRepository.findAll();
	}

	@GetMapping("/find")
	public @ResponseBody Collection<Book> finbyname(@RequestParam String name)
	// this Collection<Book> return type even be Iterable<Book> or List<Book> no
	// need to change any thing else
	{
		return userRepository.findByName(name);
	}

	@GetMapping("/update") // this method replace the given param name with name2
	public @ResponseBody List<Book> updatebyname(@RequestParam String name, @RequestParam String name2) {
		List<Book> b = null;
		for (Book n1 : userRepository.findByName(name)) {
			n1.setName(name2);
			userRepository.save(n1);
			b = userRepository.findByName(name2);
		}
		return b;
	}
}
